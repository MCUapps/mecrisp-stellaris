
\ Ledcomm for STM Nucleo L152
\   Connect LED with Anode (over optional 100 Ohms resistor) to PA0 and with Cathode directly to PA1.

compiletoflash

\ Some definitions specific to Nucleo L152:

$40020000 constant PORTA_Base
$40020400 constant PORTB_Base
$40020800 constant PORTC_Base
$40020C00 constant PORTD_Base
$40021000 constant PORTE_Base
$40021400 constant PORTH_Base
$40021800 constant PORTF_Base
$40021C00 constant PORTG_Base

PORTA_BASE $00 + constant PORTA_MODER    \ Reset 0 Port Mode Register - 00=Input  01=Output  10=Alternate  11=Analog
PORTA_BASE $04 + constant PORTA_OTYPER   \ Reset 0 Port Output type register - (0) Push/Pull vs. (1) Open Drain
PORTA_BASE $08 + constant PORTA_OSPEEDR  \ Reset 0 Output Speed Register - 00=2 MHz  01=25 MHz  10=50 MHz  11=100 MHz
PORTA_BASE $0C + constant PORTA_PUPDR    \ Reset 0 Pullup / Pulldown - 00=none  01=Pullup  10=Pulldown
PORTA_BASE $10 + constant PORTA_IDR      \ RO      Input Data Register
PORTA_BASE $14 + constant PORTA_ODR      \ Reset 0 Output Data Register
PORTA_BASE $18 + constant PORTA_BSRR     \ WO      Bit set/reset register   31:16 Reset 15:0 Set
        \ +$1C                                     ... is Lock Register, unused
PORTA_BASE $20 + constant PORTA_AFRL     \ Reset 0 Alternate function  low register
PORTA_BASE $24 + constant PORTA_AFRH     \ Reset 0 Alternate function high register
PORTA_BASE $28 + constant PORTA_BRR      \ Reset 0 Bit Reset Register

PORTC_BASE $10 + constant PORTC_IDR      \ RO      Input Data Register

\ User LD2: the green LED is a user LED connected to Arduino signal D13 corresponding to
\ MCU I/O PA5 (pin 21) or PB13 (pin 34) depending on the STM32 target.
\ On the Nucleo L152RE, this is PA5.

\ B1 USER: the user button is connected to the I/O PC13 (pin 2) of the STM32
\ microcontroller.

: led     ( ? -- )  if 1 5 lshift porta_bsrr ! else 1 5 lshift 16 lshift porta_bsrr ! then ;
: button? ( -- ? )  1 13 lshift PORTC_IDR bit@ not ;

decimal

: Sendedatenholen ( -- Daten true | false ) key? if key dup emit true else false then ;
: Datenempfangen  ( Daten -- ) emit ;
: Verbindungsanfang ( -- ) ."  (Up) "       true led ; \ Verbindungsanzeige nach Bedarf anpassen
: Verbindungsende   ( -- ) ."  (Down) " cr false led ;

1 constant Anode
2 constant Kathode

: Strahle ( -- )
  %0101 PORTA_MODER bis! \ Anode & Kathode Ausgänge
  Anode  Kathode 16 lshift or PORTA_BSRR ! \ Anode high, Kathode low
;

: Lauschen-Vorbereitung ( -- )
  %0101 PORTA_MODER bis! \ Anode & Kathode Ausgänge
  Anode 16 lshift Kathode or PORTA_BSRR ! \ Anode low, Kathode high

  \ Warten, bis die Kathode geladen ist - das geht im ARM nicht durch Einlesen des Pins
  10 0 do loop

  %1100 PORTA_MODER bic! \ Kathode sei Eingang.
;

: Lauschen-Nachbearbeitung ( -- Flag )
  Kathode PORTA_IDR bit@ not \ Ist die Kathode entladen, ist es hell
;


34 constant Synchrondauer

8 variable Strahlzaehler
0 variable Verbindungsdauer
0 variable Lauschzaehler
0 variable Lichtmuster
0 variable Sendedaten
0 variable Datenregister

true variable Zustand ( Hell oder Dunkel ? )
 244 variable Basiszeit ( in Mikrosekunden )

: msb? ( x -- x Flag ) dup 0< ;

: HolePuls ( -- )
  8 Strahlzaehler ! \ Null-Puls, wird auch im Ruhezustand gesendet.

  \ Verbindungsdauer prüfen, beginne erst zu Senden, wenn die Verbindung auch sicher besteht.
  \ Belasse es im Falle einer gerade laufenden Synchronisation dabei, Ruhezustandspulse abzugeben.

  Verbindungsdauer @ Synchrondauer <> if exit then

  Sendedaten @ ?dup if  \ An bestehender Übertragung weiterarbeiten
                      msb? if 4 Strahlzaehler ! then \ Eins-Puls erforderlich ?
                      shl 
                      dup 0= if 12 Strahlzaehler ! then \ Wurde gerade die Merk-Eins herausrotiert ? Übertragungspuls !
                      Sendedaten !
                    else  \ Neue Daten holen und vorbereiten                     
                      Sendedatenholen
                      if 
                        ?dup if  ( Daten-zum-Senden )
                               4 Strahlzaehler ! \ Bei neuen Daten ungleich Null wird die führende Eins gesendet
                               
                               msb? if \ Ist das MSB schon die führende Eins ?
                                      shl 1 or \ Eine Merk-Eins reinrotieren, die nicht übertragen wird
                                    else
                                      shl 1 or \ Eine Merk-Eins reinrotieren, die nicht übertragen wird
                                      begin
                                        msb?   \ So lange schieben, bis die führende Eins herauspurzelt
                                        swap shl swap
                                      until
                                    then
                                                              
                               Sendedaten ! \ Fertig geschobene Datenbits zum weiteren Senden bereitlegen
                             else 12 Strahlzaehler ! \ Für eine Null genügt ein Übertragungspuls
                             then
                      then
                    then
;

: Bitmustererkennung ( -- )
  Verbindungsdauer @ Synchrondauer <>
  if \ Verbindung besteht erst nach 18 mal Zublinkern stabil.
    1 Verbindungsdauer +!
    Verbindungsdauer @ Synchrondauer = if Verbindungsanfang then    
  then

  Lichtmuster @
      %1111111111100 and    \ Übertragungspuls wird mit 11 bis 14 Basiszeiten erkannt
  dup %1111111111100 = if drop Datenregister @ Datenempfangen 
                             0 Datenregister ! \ Datenregister muss gelöscht werden,
                       else                    \  da die Daten aus mit variabler Länge übertragen werden

          %111111100 and    \ Null-Puls wird mit 7-10 Basiszeiten erkannt
          %111111100 = if   Datenregister @ shl      Datenregister ! 
                       else Datenregister @ shl 1 or Datenregister ! 
                       then \ Eins-Puls wird mit 3-6 Basiszeiten erkannt.
                       
                       then
; 

: Taktlauscher-init ( -- )
  0 Sendedaten !     \ Keine Daten zum Herausrotieren und Abstrahlen ! Wichtig !
  Verbindungsdauer @ Synchrondauer = if Verbindungsende then
  0 Verbindungsdauer !

  Zustand @ if
    \ Für einen hellen Taktlauscher
    HolePuls
    Strahle
  else
    \ Für einen dunkelen Taktlauscher  
    0 Strahlzaehler !
    1 Lauschzaehler !
    Lauschen-Vorbereitung
  then
;

: Taktlauscher ( -- )
  Strahlzaehler @ ?dup 
  if \ Strahlzähler ist nicht Null
    -1 Strahlzaehler +! 
    1- if 
         Strahle
       else \ Gerade Null geworden
         32 Lauschzaehler !
         0 Lichtmuster !
         Lauschen-Vorbereitung
       then
  else
    Lauschen-Nachbearbeitung
    1 and Lichtmuster @ shl or
    dup Lichtmuster ! ( Neues-Lichtmuster )
    %11111 and
    %11100 = if 
               Bitmustererkennung 
               HolePuls
               Strahle
             else
               -1 Lauschzaehler +!
               Lauschzaehler @ if Lauschen-Vorbereitung 
                               else Taktlauscher-init then
             then
  then
;

: ledcomm ( -- )

  0 porta_odr !                              \ Alle low
  %01 5 2* lshift %0101 or porta_moder bis!  \ Leuchtdiode auf dem Nucleo und die Ledcomm-LED auf Ausgänge schalten.
  
  Taktlauscher-init

  ['] Taktlauscher irq-systick !  \ (8 / 32768) s = 244 us
  Basiszeit @ 16 * $E000E014 !    \ 244 us * 16 MHz = 3904 Takte
  7 $E000E010 !                   \ Enable the systick interrupt.

  eint begin again
;

: bright ( -- ) true zustand ! ;
: dark   ( -- ) false zustand ! ;

compiletoram
